package linktempls

import (
    "fmt"
    "strconv"
    "github.com/dsc-sgu/shawty/internal/database"
    linkdto "github.com/dsc-sgu/shawty/internal/server/dto/link"
)

templ LinkRows(params linkdto.ViewParams) {
    if len(params.Data) > 0 {
        for _, lv := range params.Data[:len(params.Data)-1] {
            @LinkRow(lv, -1, false)
        }
        @LinkRow(params.Data[len(params.Data)-1], params.Query.Page + 1, false)
        
        // NOTE(evgenymng): Possible bug â€” when a user presses "delete"
        // button, we might swap the last row before the GET request
        // has finished. Even worse, it might theoretically happen
        // before the request has even had a chance to start.
        // The solution would be to add another invisible element, that
        // triggers request instead, and doesn't get swapped on user's
        // button press.
    }
}

func linkRowsQuery(page int) string {
    return fmt.Sprintf("/links?page=%d", page)
}

templ LinkRow(lv database.LinkWithVisits, nextPage int, disabled bool) {
    <tr if disabled {
            class="link disabled"
        } else {
            class="link"
        }
        data-name={ lv.Name }
        if nextPage > 0 {
            hx-get={ linkRowsQuery(nextPage) }
            hx-trigger="revealed"
            hx-swap="afterend"
        }
    >
        <td class="name">
            <div class="container">
                <div class="content">
                    { lv.Name }
                </div>
            </div>
        </td>
        <td class="target">
            <div class="container">
                <div class="content">
                    { lv.Target }
                </div>
            </div>
        </td>
        <td class="visits">
            <div class="container">
                <div class="content">
                    { strconv.Itoa(lv.TotalVisits) }
                </div>
            </div>
        </td>
        <td class="created-at">
            <div class="container">
                <div class="content">
                    { lv.CreatedAt.Format(time.DateTime + " -0700") }
                </div>
            </div>
        </td>
        <td class="created-from">
            <div class="container">
                <div class="content">
                    { lv.CreatedFrom }
                </div>
            </div>
        </td>
        <td class="delete">
            if !disabled {
                <div class="container"
                     hx-delete={ string(templ.URL(fmt.Sprintf("/links?name=%s", lv.Name))) }
                     hx-target={ fmt.Sprintf(`.link[data-name=%q]`, lv.Name) }
                     hx-swap="outerHTML">
                    <div class="content">
                        <img src="/static/img/trash.svg">
                    </div>
                </div>
            }
        </td>
    </tr>
}
